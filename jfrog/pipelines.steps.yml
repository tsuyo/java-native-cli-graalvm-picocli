apiVersion: v1.0
pipelines:
  - name: java_native_cli_graalvm_picocli
    steps:
      # see https://www.jfrog.com/confluence/display/JFROG/MvnBuild
      - name: mvn_install
        type: MvnBuild
        configuration:
          mvnCommand: -Dskip=true clean install # TODO: revert to -Dskip=false
          sourceLocation: .
          configFileLocation: jfrog
          configFileName: mvn-art-config
          forceXrayScan: false
          # failOnScan: true
          autoPublishBuildInfo: true

          integrations:
            - name: kirasoa_artifactory
          inputResources:
            - name: src_GitRepo
          outputResources:
            - name: mvn_BuildInfo
          runtime:
            type: image
            image:
              custom:
                name: kirasoa/pipelines-u18graalvm
                tag: "11"
        execution:
          onStart:
            - echo "[TM] onStart"
            - restore_cache_files m2_cache ${HOME}/.m2
            - java -version
            - mvn -version
          onSuccess:
            - echo "[TM] onSuccess"
            - add_cache_files ${HOME}/.m2 m2_cache
            # TODO: revert to target/checksum
            - jfrog rt u ${res_src_GitRepo_resourcePath}/jfrog/checksum generic-dev-local/latest/ --build-name=${res_checksum_dev_BuildInfo_buildName} --build-number=${res_checksum_dev_BuildInfo_buildNumber}
            - jfrog rt bp ${res_checksum_dev_BuildInfo_buildName} ${res_checksum_dev_BuildInfo_buildNumber}
          onFailure:
            - echo "[TM] onFailure"
          onComplete:
            - echo "[TM] onComplete"

      # - name: scan_mvn
      #   type: XrayScan
      #   configuration:
      #     failOnScan: true
      #     inputResources:
      #       - name: mvn_BuildInfo
      #         trigger: true
      #     # outputResources:
      #     #   - name: mvn_scan_BuildInfo

      - name: test_pre_qa
        type: Bash
        configuration:
          inputSteps:
            - name: mvn_install
        execution:
          onExecute:
            - echo "executing test pre qa"

      - name: promote_to_qa
        type: PromoteBuild
        configuration:
          targetRepository: generic-qa-local
          includeDependencies: false
          status: QA
          comment: test pre qa passed
          # copy: false
          inputResources:
            - name: checksum_dev_BuildInfo
              trigger: true
          inputSteps:
            - name: test_pre_qa
          outputResources:
            - name: checksum_qa_BuildInfo

      - name: test_pre_prod
        type: Bash
        configuration:
          inputSteps:
            - name: promote_to_qa
        execution:
          onExecute:
            - echo "executing test pre prod"

      - name: promote_to_prod
        type: PromoteBuild
        configuration:
          targetRepository: generic-prod-local
          includeDependencies: false
          status: PROD
          comment: test pre prod passed
          # copy: false
          inputResources:
            - name: checksum_qa_BuildInfo
              trigger: true
          inputSteps:
            - name: test_pre_prod
          outputResources:
            - name: checksum_prod_BuildInfo